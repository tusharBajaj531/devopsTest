pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "my-flask-app"
        DOCKER_TAG = "latest"
    }

    stages {
        // Stage 1: Checkout code from Git
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/tusharBajaj531/devopsTest'
            }
        }


        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sq') {  // Name must match Jenkins config
                    sh 'sonar-scanner -Dsonar.projectKey=devops-test'
                }
            }
        }

        // Stage 2: Build and Test (Optional)
//        stage('Build & Test') {
 //           steps {
 //               sh 'python --version'
 //               sh 'pip install -r requirements.txt'
 //               sh 'python app.py &'
 //           }
 //       }

        // Stage 3: Build Docker Image
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        // Stage 4: Deploy
        stage('Deploy') {
            steps {
                script {
                    // Stop and remove old container
                    sh 'docker stop my-flask-container || true'
                    sh 'docker rm my-flask-container || true'
                    // Run new container
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").run(
                        "--name my-flask-container -d -p 5000:5000"
                    )
                }
            }
        }
    }

    // Post-build actions (e.g., notifications)
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
